certManager:
  # DaemonSet or Deployment
  kind: Deployment
  replicaCount: 1

  image:
    repository: joeelliott/cert-exporter
    pullPolicy: IfNotPresent
    command: ["./app"]
    args:
      - --secrets-annotation-selector=cert-manager.io/certificate-name
      - --secrets-include-glob=*.crt
      - --logtostderr
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}
  # environment: prod
  # prometheus.io/scrape: true
  # prometheus.io/port: 8080
  # prometheus.io/path: /metrics

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:s
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  volumes: []
    # - name: kubelet
    #   hostPath:
    #     path: /var/lib/kubelet
    #     type: Directory
  volumeMounts: []
    # - mountPath: /var/lib/kubelet/pki
    #   mountPropagation: HostToContainer
    #   name: kubelet
    #   readOnly: true

service:
  type: ClusterIP
  port: 8080

  portName: http-metrics

  # Annotations to add to the service
  annotations: {}

  # Requires prometheus-operator to be installed
  serviceMonitor:
    create: false

    # cannot be empty
    additionalLabels:
      prometheus.io/load-rule: "true"

    ## Scrape interval. If not set, the Prometheus default scrape interval is used.
    ##
    interval: 20s

    ## metric relabel configs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]

    # relabel configs to apply to samples before ingestion.
    ##
    relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace

rbac:
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: cert-exporter

  clusterRole:
    # New role to grant to the service account
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Rules for the Role
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "list"]

  clusterRoleBinding:
    create: true

dashboards:
  # Labels to add to all dashboard ConfigMaps
  additionalLabels:
    grafana_dashboard: "1"
  certManagerDashboard:
    create: true
  namespace: monitoring
